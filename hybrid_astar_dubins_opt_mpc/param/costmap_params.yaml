global_costmap:
  plugins:
    - { name: static_layer,    type: "costmap_2d::StaticLayer" } #静态地图层，SLAM构建的静态地图
    # - { name: keep_out_layer,  type: "costmap_2d::KeepOutLayer" }
    - { name: obstacle_layer,  type: "costmap_2d::ObstacleLayer" } #障碍地图层，传感器感知的障碍物信息反馈在该层
    # - { name: inflation_layer, type: "costmap_2d::InflationLayer" } #膨胀层，在以上两层地图上进行膨胀（向外扩张），以避免机器人的外壳会撞上障碍物

  track_unknown_space: true #用于设置是否将未知空间视为空闲空间。如果为false，则会将未知空间视为空闲空间；否则视为未知空间。
  global_frame: map #地图坐标系
  robot_base_frame: base_footprint #机器人坐标系
  map_type: costmap #地图类型

  #机器人几何参，如果机器人是圆形，设置 robot_radius,如果是其他形状设置 footprint
  # robot_radius: 0.12 #圆形
  #其他形状：
  footprint: [[0.36, 0.29], [-0.36, 0.29], [-0.36, -0.29], [0.36, -0.29]]
  # 全局代价地图更高，使得规划的过程比控制过程更加严格
  footprint_padding: 0.05 #机器人形状的填充值，这个参数可以控制机器人在导航时与障碍物之间的距离。填充值越大，机器人与障碍物之间的最小距离就越大

  update_frequency: 2.0 #代价地图更新频率 Hz
  publish_frequency: 1.0 #代价地图的发布频率
  transform_tolerance: 0.5 #等待坐标变换发布信息的超时时间

  static_map: true # 是否使用一个地图或者地图服务器来初始化全局代价地图，如果不使用静态地图，这个参数为false.
  always_send_full_costmap: false #是否在每次更新代价地图时都发送完整的代价地图消息
  resolution: 0.1 #同地图分辨率

  #静态地图层的参数配置
  static_layer:
    map_topic: /map
    track_unknown_space: true #是否追踪未知空间

  keep_out_layer:
    enabled: true
    fill_zones: false #不需要对禁行区进行填充
    inflation_option: 3 #语义代价地图

  obstacle_layer:
    # observation_sources: 3dscan 2dscan
    observation_sources: 2dscan #导航包所需要的传感器
    #对传感器的坐标系和数据进行配置。这个也会用于代价地图添加和清除障碍物。例如，你可以用激光雷达传感器用于在代价地图添加障碍物，再添加kinect用于导航和清除障碍物。
    # 3dscan: { sensor_frame: top_laser_link, data_type: PointCloud2, topic: vlp_points, obstacle_range: 6.0, raytrace_range: 6.5, marking: true, clearing: true,  min_obstacle_height: 0, max_obstacle_height: 0.6 }
    # obstacle_range: 3.0 # 用于障碍物探测，比如: 值为 3.0，意味着检测到距离小于 3 米的障碍物时，就会引入代价地图
    # raytrace_range: 3.5 # 用于清除障碍物，比如：值为 3.5，意味着清除代价地图中 3.5 米以外的障碍物
    # marking：定义了当传感器检测到障碍物时，如何在代价地图中标记障碍物的方法。这个参数通常是一个代价值，用于表示障碍物的影响程度
    # clearing：定义了当传感器检测到无障碍物时，如何在代价地图中清除障碍物标记的方法。这个参数通常也是一个代价值，用于表示清除障碍物的影响程度
    2dscan: { sensor_frame: laser, data_type: LaserScan, topic: scan, obstacle_range: 6.0, raytrace_range: 6.5, marking: true, clearing: true }
    track_unknown_space: false
    inflation_option: 3

  inflation_layer:
    inflation_radius: 0.6 #膨胀半径，扩展在碰撞区域以外的代价区域，使得机器人规划路径避开障碍物
    cost_scaling_factor: 12.61 #代价比例系数，越大则代价值越小


local_costmap:
  plugins:
    # - { name: keep_out_layer,  type: "costmap_2d::KeepOutLayer" }
    - { name: obstacle_layer,  type: "costmap_2d::ObstacleLayer" }
    # - { name: inflation_layer, type: "costmap_2d::InflationLayer" }

  global_frame: map
  robot_base_frame: base_footprint #机器人坐标系
  map_type: costmap
  footprint: [[0.36, 0.29], [-0.36, 0.29], [-0.36, -0.29], [0.36, -0.29]]
  footprint_padding: 0.0

  update_frequency: 5.0 #代价地图更新频率
  publish_frequency: 1.0 #代价地图的发布频率
  transform_tolerance: 0.5 #等待坐标变换发布信息的超时时间

  static_map: false #不需要静态地图，可以提升导航效果
  rolling_window: true #是否使用动态窗口，默认为false，在静态的全局地图中，地图不会变化
  width: 4 # 局部地图宽度 单位是 m
  height: 4 # 局部地图高度 单位是 m
  resolution: 0.1 # 局部地图分辨率 单位是 m，一般与静态地图分辨率保持一致

  keep_out_layer:
    enabled: true
    fill_zones: false
    inflation_option: 3

  obstacle_layer:
    # observation_sources: 3dscan 2dscan
    observation_sources: 2dscan
    # 3dscan: { sensor_frame: top_laser_link, data_type: PointCloud2, topic: vlp_points, obstacle_range: 6.0, raytrace_range: 6.5, marking: true, clearing: true, min_obstacle_height: 0, max_obstacle_height: 0.6 }
    2dscan: { sensor_frame: laser, data_type: LaserScan, topic: scan, obstacle_range: 6.0, raytrace_range: 6.5, marking: true, clearing: true }
    track_unknown_space: false
    inflation_option: 3

  inflation_layer:
    inflation_radius: 0.6
    cost_scaling_factor: 12.5
